#
# Cookbook:: gem-mirror
# Recipe:: server
#
# Copyright:: 2019, The Authors, All Rights Reserved.

chef_gem 'gem-mirror'

#file '/opt/chef/embedded/bin/gem-mirror' do
#  action	File.symlink?('/opt/chef/embedded/bin/gem-mirror') ? :delete : :nothing
#end

file '/opt/chef/embedded/bin/gem-mirror' do
  action	:create
  force_unlink	true
  content <<-EOOCEBG
#!/opt/chef/embedded/bin/ruby
#
# This file was generated by RubyGems.
#
# The application 'gem-mirror' is installed as part of a gem, and
# this file is here to facilitate running it.
#

require 'rubygems'

version = ">= 0.a"

if ARGV.first
  str = ARGV.first
  str = str.dup.force_encoding("BINARY") if str.respond_to? :force_encoding
  if str =~ /\\A_(.*)_\\z/ and Gem::Version.correct?($1) then
    version = $1
    ARGV.shift
  end
end

load Gem.activate_bin_path('gem-mirror', 'gem-mirror', version)
EOOCEBG
end

package 'httpd'

service 'httpd' do
  supports restart: true, reload: true, status: true
  action	[ :enable, :start ]	# order above must have this last
end

Chef::Log.info "#{cookbook_name}::#{recipe_name} config is #{node['_repos']}"

confighash=node['_repos']['rubygems']['local_mirrors']
  .select{|x| x.include?(node['hostname'])}
  .values
  .first

template "/etc/httpd/conf.d/#{cookbook_name}.conf" do
  source	'httpd.d.conf.erb'
  variables	({
                   :httpd	=> confighash
                 })
  notifies :reload, 'service[httpd]', :delayed
end

if configdir = [*confighash.dig('aliasdir')||[]].map{|x| "/"+x.split('/').join('/')}.first

directory configdir do
  user		confighash.dig('user')||'apache'
  group		confighash.dig('group')||'apache'
  recursive	true
  mode		'0751'
end

gemmirror='/opt/chef/embedded/bin/gem-mirror'
configfile="#{configdir}/config.rb"

Chef::Log.info "#{cookbook_name}::#{recipe_name} dir:#{configdir} file:#{configfile} gemmirror:#{gemmirror}" 

execute "#{gemmirror} checksum -c #{configfile}" do
  user		confighash.dig('user')||'apache'
  group		confighash.dig('group')||'apache'

  action	:nothing
end

execute "#{gemmirror} index -c #{configfile}" do
  user		confighash.dig('user')||'apache'
  group		confighash.dig('group')||'apache'

  action	:nothing
  notifies	:run, "execute[#{gemmirror} checksum -c #{configfile}]", :immediate
end  

execute "#{gemmirror} update -c #{configfile}" do
  user		confighash.dig('user')||'apache'
  group		confighash.dig('group')||'apache'

  action	:nothing
  notifies	:run, "execute[#{gemmirror} index -c #{configfile}]", :immediate
end

execute "#{gemmirror} init #{configdir}/" do
  user		confighash.dig('user')||'apache'
  group		confighash.dig('group')||'apache'
  creates  	configfile
  notifies	:run, "execute[#{gemmirror} update -c #{configfile}]", :immediate
end


template configfile do
  user		confighash.dig('user')||'apache'
  group		confighash.dig('group')||'apache'

  source	'gemirror.config.rb.erb'
  variables	({
                   :config	=> confighash
                 })
  notifies	:run, "execute[#{gemmirror} update -c #{configfile}]", :delayed
end

else
  Chef::Log.fatal "#{cookbook_name}::#{recipe_name} dir:#{configdir} broken !!"
end

  
